{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AOSP Latest Projects: FTPChat (File Transfer Chatting Project) Overview: FTPChat is a lightweight, encrypted messaging protocol implemented entirely in Python. It facilitates secure communication by reading and writing messages to a shared file hosted on an FTP server. FTPChat is specifically designed for deployment in legacy environments, including low-power routers equipped with USB and FTP capabilities. This makes it an ideal solution for resource-constrained scenarios or discreet operations. Key Features: 24-layer encryption ensuring robust payload security File-based transport mechanism utilizing FTP Fully operational within a single .py file Optimized for legacy hardware and low-power devices Compatible with routers supporting USB and FTP Energy-efficient and environmentally conscious design You can also chat internationally (Non LAN) by using SFTPCloud Tool a free tool that you can make a globally accessible FTP server You can also make it work locally by using our guide Documentation/Quick Start Guide (Making FTP Server).md Protocol Operation: Messages are exchanged via a shared file on an FTP server. Each message contains a timestamp, username, and encrypted content. The protocol provides: Conflict-safe message writing Encrypted message formatting Lightweight, file-based communication Note: FTPChat does not support auto-refresh or background polling. Usage Instructions: Download FtpChat.exe for Windows 10/11, or run the Python script on macOS or Linux. Activate your FTP server. Refer to Documentation/Quick Start Guide (Making FTP Server).md for detailed setup instructions. Enter your credentials as prompted. Please review the Notes Before Starting section prior to use. License: FTPChat is distributed under a custom MIT-style license. Commercial use is strictly prohibited without written permission from the author. All rights to the name \u201cFTPChat\u201d and its protocol specification are reserved by Ahmed Omar Saad. For full license details, refer to the `LICENSE You can find its source code in this repository: https://github.com/ahmedomar2014/FTPChat, But don't forget to read the license\ud83d\ude09. Tlock (Text Locker Encryption Protocol) Multi-Format Encryption System Version 1.8 \u2014 October 2025 Author: Ahmed Omar Saad Contact: ahmedomardev@outlook.com Overview: Tlock is a multi-layered encryption protocol designed to secure text, media, and document files with extreme depth and modularity. Built entirely in Python, it supports GUI-based workflows, password protection, and clipboard automation for fast and secure file handling. Tlock is optimized for environments that need security, offline workflows. Key Features: 48-layer encryption cycle Supports text, image, audio, video, document, presentation, and spreadsheet formats GUI interface with password prompts and text-to-speech Clipboard integration for key delivery Threading and multiprocessing support Fully operational within a single .py file Supported File Types (GUI Menu): File Type Extension Menu Label Text .tetf Text Files Image .teif Image Files Audio .teaf Audio Files Video .tevf Video Files Word Document .tedf Word Files PowerPoint .teppf Powerpoint Files Excel Sheet .teef Excel Files Access Database .teadf Access Files Publisher File .tempf Publisher Files OneNote File .temof OneNote Files PDF Document .tepf PDF Files Zip Archive .tezf Zip Files Usage Instructions: \ud83d\udd10 To Encrypt Files : Run Tlock.exe on Windows. Choose the file type you wish to encrypt. A key will be generated and auto-copied for later access for the file. The encrypted file will be saved with a .te* extension. \ud83d\udd13 To Decrypt Files : Run Tlock.exe on Windows. Choose the file type you wish to decrypt. Enter the decryption key that was auto-copied. The decrypted file will be restored to its original format (e.g., .txt , .jpg , .mp3 , .docx , etc.). You can view or play the decrypted content immediately after recovery. \ud83d\udd10 To Encrypt Text Files : Run Tlock.exe on Windows. Navigate to the Text Files menu and select Save a Tetf . Type or paste your text into the input field. Enter a password when prompted. Save the encrypted file when prompted. It will be saved with a .tetf extension. \ud83d\udd13 To Decrypt Text Files : Run Tlock.exe on Windows. Navigate to the Text Files menu and select Open a Tetf . Choose the .tetf file you wish to decrypt. Enter the correct password when prompted. The decrypted content will be displayed in a new window. You can optionally activate Text to Speech to read the content aloud, but it needs network connection. Performance Benchmark: Encrypted approximately 100,000 characters under full 48-layer mode Tested on: Intel Core i5-13420H , RTX 2050 GPU, 16GB RAM DDR5 Result: ~30 seconds Intel Core i7-8650U , Intel UHD 620, 16GB RAM DDR3 Result: ~1 minute 30 seconds Environment: Windows 11, Python 3.13 Result: The program performs faster on higher-end CPUs Note: Less size = Faster speeds and vice versa License: Tlock is distributed under a custom MIT-style license. Commercial use requires prior written permission from the author. All rights to the name \u201cTlock\u201d and its protocol specification are reserved by Ahmed Omar Saad. For full license details, refer to the LICENSE file. Source code: github.com/ahmedomar2014/Tlock , But don't forget to read the license\ud83d\ude09. Keep In Touch! You can get help or a business inquiry by contacting me by these ways: Phone Number: +201040946638 Email: ahmedomardev@outlook.com Alt Email: ahmedomarhuawei@gmail.com","title":"AOSP"},{"location":"#aosp","text":"","title":"AOSP"},{"location":"#latest-projects","text":"","title":"Latest Projects:"},{"location":"#ftpchat-file-transfer-chatting-project","text":"","title":"FTPChat (File Transfer Chatting Project)"},{"location":"#overview","text":"FTPChat is a lightweight, encrypted messaging protocol implemented entirely in Python. It facilitates secure communication by reading and writing messages to a shared file hosted on an FTP server. FTPChat is specifically designed for deployment in legacy environments, including low-power routers equipped with USB and FTP capabilities. This makes it an ideal solution for resource-constrained scenarios or discreet operations.","title":"Overview:"},{"location":"#key-features","text":"24-layer encryption ensuring robust payload security File-based transport mechanism utilizing FTP Fully operational within a single .py file Optimized for legacy hardware and low-power devices Compatible with routers supporting USB and FTP Energy-efficient and environmentally conscious design You can also chat internationally (Non LAN) by using SFTPCloud Tool a free tool that you can make a globally accessible FTP server You can also make it work locally by using our guide Documentation/Quick Start Guide (Making FTP Server).md","title":"Key Features:"},{"location":"#protocol-operation","text":"Messages are exchanged via a shared file on an FTP server. Each message contains a timestamp, username, and encrypted content. The protocol provides: Conflict-safe message writing Encrypted message formatting Lightweight, file-based communication Note: FTPChat does not support auto-refresh or background polling.","title":"Protocol Operation:"},{"location":"#usage-instructions","text":"Download FtpChat.exe for Windows 10/11, or run the Python script on macOS or Linux. Activate your FTP server. Refer to Documentation/Quick Start Guide (Making FTP Server).md for detailed setup instructions. Enter your credentials as prompted. Please review the Notes Before Starting section prior to use.","title":"Usage Instructions:"},{"location":"#license","text":"FTPChat is distributed under a custom MIT-style license. Commercial use is strictly prohibited without written permission from the author. All rights to the name \u201cFTPChat\u201d and its protocol specification are reserved by Ahmed Omar Saad. For full license details, refer to the `LICENSE You can find its source code in this repository: https://github.com/ahmedomar2014/FTPChat, But don't forget to read the license\ud83d\ude09.","title":"License:"},{"location":"#tlock-text-locker-encryption-protocol","text":"Multi-Format Encryption System Version 1.8 \u2014 October 2025 Author: Ahmed Omar Saad Contact: ahmedomardev@outlook.com","title":"Tlock (Text Locker Encryption Protocol)"},{"location":"#overview_1","text":"Tlock is a multi-layered encryption protocol designed to secure text, media, and document files with extreme depth and modularity. Built entirely in Python, it supports GUI-based workflows, password protection, and clipboard automation for fast and secure file handling. Tlock is optimized for environments that need security, offline workflows.","title":"Overview:"},{"location":"#key-features_1","text":"48-layer encryption cycle Supports text, image, audio, video, document, presentation, and spreadsheet formats GUI interface with password prompts and text-to-speech Clipboard integration for key delivery Threading and multiprocessing support Fully operational within a single .py file","title":"Key Features:"},{"location":"#supported-file-types-gui-menu","text":"File Type Extension Menu Label Text .tetf Text Files Image .teif Image Files Audio .teaf Audio Files Video .tevf Video Files Word Document .tedf Word Files PowerPoint .teppf Powerpoint Files Excel Sheet .teef Excel Files Access Database .teadf Access Files Publisher File .tempf Publisher Files OneNote File .temof OneNote Files PDF Document .tepf PDF Files Zip Archive .tezf Zip Files","title":"Supported File Types (GUI Menu):"},{"location":"#usage-instructions_1","text":"\ud83d\udd10 To Encrypt Files : Run Tlock.exe on Windows. Choose the file type you wish to encrypt. A key will be generated and auto-copied for later access for the file. The encrypted file will be saved with a .te* extension. \ud83d\udd13 To Decrypt Files : Run Tlock.exe on Windows. Choose the file type you wish to decrypt. Enter the decryption key that was auto-copied. The decrypted file will be restored to its original format (e.g., .txt , .jpg , .mp3 , .docx , etc.). You can view or play the decrypted content immediately after recovery. \ud83d\udd10 To Encrypt Text Files : Run Tlock.exe on Windows. Navigate to the Text Files menu and select Save a Tetf . Type or paste your text into the input field. Enter a password when prompted. Save the encrypted file when prompted. It will be saved with a .tetf extension. \ud83d\udd13 To Decrypt Text Files : Run Tlock.exe on Windows. Navigate to the Text Files menu and select Open a Tetf . Choose the .tetf file you wish to decrypt. Enter the correct password when prompted. The decrypted content will be displayed in a new window. You can optionally activate Text to Speech to read the content aloud, but it needs network connection.","title":"Usage Instructions:"},{"location":"#performance-benchmark","text":"Encrypted approximately 100,000 characters under full 48-layer mode Tested on: Intel Core i5-13420H , RTX 2050 GPU, 16GB RAM DDR5 Result: ~30 seconds Intel Core i7-8650U , Intel UHD 620, 16GB RAM DDR3 Result: ~1 minute 30 seconds Environment: Windows 11, Python 3.13 Result: The program performs faster on higher-end CPUs Note: Less size = Faster speeds and vice versa","title":"Performance Benchmark:"},{"location":"#license_1","text":"Tlock is distributed under a custom MIT-style license. Commercial use requires prior written permission from the author. All rights to the name \u201cTlock\u201d and its protocol specification are reserved by Ahmed Omar Saad. For full license details, refer to the LICENSE file. Source code: github.com/ahmedomar2014/Tlock , But don't forget to read the license\ud83d\ude09.","title":"License:"},{"location":"#keep-in-touch","text":"You can get help or a business inquiry by contacting me by these ways: Phone Number: +201040946638 Email: ahmedomardev@outlook.com Alt Email: ahmedomarhuawei@gmail.com","title":"Keep In Touch!"},{"location":"FTPChat%20-%20Making%20an%20FTP%20Server/","text":"FTPChat - Making an FTP Server Using ZTE ZXHN H188A SuperVectoring (Telecom Egypt) \u2014 FTP Server Setup Guide Transform your Telecom Egypt-issued H188A router into a USB-powered FTP server using its default functionality \u2014 no firmware flashing or OpenWRT required. \ud83e\uddf0 Requirements ZTE ZXHN H188A router (Telecom Egypt / WE) USB flash drive formatted as FAT32 or NTFS PC or server connected to the router (Windows or Linux) Router login credentials (default: admin / check label for password) \ud83d\udd0c Step 1: Prepare USB Storage Format the USB drive as FAT32 or NTFS. Create folders such as /Public , /Media , or /Shared . Insert the USB drive into the router\u2019s rear USB 2.0 port. Wait 10\u201320 seconds for detection. \ud83c\udf10 Step 2: Access Router Admin Panel Launch a browser and go to: http://192.168.1.1 . Log in with credentials: Username: admin Password: (found on router label) \u2699\ufe0f Step 3: Enable FTP Server Navigate to: Application > USB Storage > FTP Server . Enable the FTP service. Choose folders on the USB to share. Set access preferences: Anonymous (optional) User-based (recommended): Username: ftpuser Password: yourpassword Permission: Read/Write or Read-Only \ud83e\uddea Step 4: Test FTP Access Locally \ud83d\udda5\ufe0f Windows Open File Explorer Enter: ftp://192.168.1.1 in the address bar Enter credentials if prompted \ud83d\udda5\ufe0f Linux (with curl ) curl ftp://ftpuser:yourpassword@192.168.1.1/ \ud83d\udca1 Replace ftpuser and yourpassword with your actual login. The command lists shared folder contents. \ud83d\udcca FTP User & Network Capacity Interface Max Devices Notes 2.4 GHz Wi-Fi ~32 users Light browsing and file access 5 GHz Wi-Fi ~32 users Ideal for FTP and media streaming LAN Ports 3 devices Stable, high-speed transfers FTP Users 5\u201310 users Stable performance recommended \ud83e\udde0 For simultaneous large file transfers, prioritize LAN or 5 GHz. Performance may drop beyond ~10 active users. \u2705 Setup Complete Your router is now a functional FTP server, ready to share files across your local network. \ud83c\udf10 Additional Information ZTE ZXHN H188A SuperVectoring (Telecom Egypt): Purchase Link To acquire this device, Telecom Egypt partnership is required.","title":"FTPChat - Making an FTP Server"},{"location":"FTPChat%20-%20Making%20an%20FTP%20Server/#ftpchat-making-an-ftp-server","text":"","title":"FTPChat - Making an FTP Server"},{"location":"FTPChat%20-%20Making%20an%20FTP%20Server/#using-zte-zxhn-h188a-supervectoring-telecom-egypt-ftp-server-setup-guide","text":"Transform your Telecom Egypt-issued H188A router into a USB-powered FTP server using its default functionality \u2014 no firmware flashing or OpenWRT required.","title":"Using ZTE ZXHN H188A SuperVectoring (Telecom Egypt) \u2014 FTP Server Setup Guide"},{"location":"FTPChat%20-%20Making%20an%20FTP%20Server/#requirements","text":"ZTE ZXHN H188A router (Telecom Egypt / WE) USB flash drive formatted as FAT32 or NTFS PC or server connected to the router (Windows or Linux) Router login credentials (default: admin / check label for password)","title":"\ud83e\uddf0 Requirements"},{"location":"FTPChat%20-%20Making%20an%20FTP%20Server/#step-1-prepare-usb-storage","text":"Format the USB drive as FAT32 or NTFS. Create folders such as /Public , /Media , or /Shared . Insert the USB drive into the router\u2019s rear USB 2.0 port. Wait 10\u201320 seconds for detection.","title":"\ud83d\udd0c Step 1: Prepare USB Storage"},{"location":"FTPChat%20-%20Making%20an%20FTP%20Server/#step-2-access-router-admin-panel","text":"Launch a browser and go to: http://192.168.1.1 . Log in with credentials: Username: admin Password: (found on router label)","title":"\ud83c\udf10 Step 2: Access Router Admin Panel"},{"location":"FTPChat%20-%20Making%20an%20FTP%20Server/#step-3-enable-ftp-server","text":"Navigate to: Application > USB Storage > FTP Server . Enable the FTP service. Choose folders on the USB to share. Set access preferences: Anonymous (optional) User-based (recommended): Username: ftpuser Password: yourpassword Permission: Read/Write or Read-Only","title":"\u2699\ufe0f Step 3: Enable FTP Server"},{"location":"FTPChat%20-%20Making%20an%20FTP%20Server/#step-4-test-ftp-access-locally","text":"","title":"\ud83e\uddea Step 4: Test FTP Access Locally"},{"location":"FTPChat%20-%20Making%20an%20FTP%20Server/#windows","text":"Open File Explorer Enter: ftp://192.168.1.1 in the address bar Enter credentials if prompted","title":"\ud83d\udda5\ufe0f Windows"},{"location":"FTPChat%20-%20Making%20an%20FTP%20Server/#linux-with-curl","text":"curl ftp://ftpuser:yourpassword@192.168.1.1/ \ud83d\udca1 Replace ftpuser and yourpassword with your actual login. The command lists shared folder contents.","title":"\ud83d\udda5\ufe0f Linux (with curl)"},{"location":"FTPChat%20-%20Making%20an%20FTP%20Server/#ftp-user-network-capacity","text":"Interface Max Devices Notes 2.4 GHz Wi-Fi ~32 users Light browsing and file access 5 GHz Wi-Fi ~32 users Ideal for FTP and media streaming LAN Ports 3 devices Stable, high-speed transfers FTP Users 5\u201310 users Stable performance recommended \ud83e\udde0 For simultaneous large file transfers, prioritize LAN or 5 GHz. Performance may drop beyond ~10 active users.","title":"\ud83d\udcca FTP User &amp; Network Capacity"},{"location":"FTPChat%20-%20Making%20an%20FTP%20Server/#setup-complete","text":"Your router is now a functional FTP server, ready to share files across your local network.","title":"\u2705 Setup Complete"},{"location":"FTPChat%20-%20Making%20an%20FTP%20Server/#additional-information","text":"ZTE ZXHN H188A SuperVectoring (Telecom Egypt): Purchase Link To acquire this device, Telecom Egypt partnership is required.","title":"\ud83c\udf10 Additional Information"}]}